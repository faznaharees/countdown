{"version":3,"sources":["Timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","props","handleChange","e","console","log","target","value","setState","a","handleSubmit","preventDefault","count","state","checkState","text","className","onSubmit","this","type","content","onChange","onClick","doIntervalChange","myInterval","setInterval","prevState","clearInterval","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2PAgEeA,E,kDA7DX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAOVC,aAAe,SAACC,GACZC,QAAQC,IAAIF,EAAEG,OAAOC,OACrB,EAAKC,SAAS,CACVC,EAAGN,EAAEG,OAAOC,SAXF,EAelBG,aAAe,SAACP,GACZA,EAAEQ,iBACF,EAAKH,SAAS,CACVI,MAAM,EAAKC,MAAMJ,KAlBP,EAkDlBK,WAAW,WACP,EAAKN,SAAS,CACVO,KAAyB,IAAnB,EAAKF,MAAMD,MAAY,aAAe,KAEhDR,QAAQC,IAAI,UApDZ,EAAKQ,MAAQ,CACTD,MAAM,EACNH,EAAE,GACFM,KAAK,IALK,E,qDAsBd,OACI,yBAAKC,UAAU,aACX,sCACC,0BAAMC,SAAUC,KAAKR,cAClB,2BAAOS,KAAK,OAAOZ,MAAOW,KAAKL,MAAMO,QAASC,SAAUH,KAAKhB,eAAsB,6BACnF,4BAAQoB,QAASJ,KAAKR,cAAtB,UAEJ,4BAAKQ,KAAKL,MAAMD,OAAW,gC,0CAWnCM,KAAKJ,aACLI,KAAKK,qB,yCAGU,IAAD,OAACL,KAAKM,WAAaC,aAAY,WAC7C,EAAKjB,UAAS,SAAAkB,GAAS,MAAK,CACxBd,MAAQc,EAAUd,MAAO,EAAKc,EAAUd,MAAM,EAAK,QAEzD,O,6CASEe,cAAcT,KAAKM,gB,GA1DPI,aCcLC,G,8KATb,OACE,yBAAKb,UAAU,OAEb,kBAAC,EAAD,W,GANYY,cCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.4fc672c0.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Timer extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            count:0,\n            a:'',\n            text:''\n        }\n    }\n    handleChange = (e) => {\n        console.log(e.target.value)\n        this.setState({\n            a: e.target.value\n        })\n        \n    }\n    handleSubmit = (e) =>{\n        e.preventDefault();\n        this.setState({\n            count:this.state.a\n        })\n    }\n    render() {\n        return (\n            <div className=\"container\">\n                <h2>TikTik</h2>\n                 <form onSubmit={this.handleSubmit}>\n                    <input type=\"text\" value={this.state.content} onChange={this.handleChange}></input><br/>\n                    <button onClick={this.handleSubmit}>Start</button>\n                 </form>\n                <h1>{this.state.count}</h1><br/>\n                \n            </div>\n        )\n    }\n    //setInterval\n\n\n    //clear Interval\n    componentDidMount(){\n        \n        this.checkState()\n        this.doIntervalChange()\n        \n    }\n    doIntervalChange(){this.myInterval = setInterval(()=>{\n        this.setState(prevState => ({\n            count: (prevState.count)>0 ? (prevState.count-1) : 0\n        }))\n    },1000)}\n\n    checkState=()=>{\n        this.setState({\n            text: this.state.count===0 ? ' Time Up !' : ''\n        })\n        console.log(\"hello\")\n    }\n    componentWillUnmount(){\n        clearInterval(this.myInterval)\n    }\n}\n\nexport default Timer\n","import React, { Component } from 'react';\nimport Timer from './Timer'\nimport { render } from '@testing-library/react';\n\nclass App extends Component{\n  \n  render(){\n  return (\n    <div className=\"App\">\n     \n      <Timer/>\n      </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}